name: SDL3 Cpp Playground Github Actions

on: 
  push:
    branches:
      - main
    paths-ignore:
      - '**/**.md'

env:
  CMAKE_VERSION: "3.29.6"
  NINJA_VERSION: "1.12.1"

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
         - {
            name: "SDL3 CppPlayground Build on Windows Latest MSVC", artifact: "Windows-MSVC",
            os: windows-latest,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
           }
         - {
            name: "SDL3 CppPlayground Build on Ubuntu Latest GCC", artifact: "Linux",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }
    steps:
    - uses: actions/checkout@v4

    - name: Greeting-Windows
      if: runner.os == 'Windows'
      run: |
        echo "Cpp Playground Github Actions started from Windows!"

    - name: Greeting-Linux
      if: runner.os == 'Linux'
      run: |
        echo "Cpp Playground Github Actions started from Linux!"   

    - name: Configure build for amd64
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: Install Other 3rd Party Dependencies - Windows
      id: external_libraries_win
      if: runner.os == 'Windows'
      run: |
        .\scripts\install_dependencies.bat
      shell: cmd      

    - name: Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt install clang-tidy -y    
        sudo apt install lcov gcovr -y

    - name: Download Ninja and CMake
      if: runner.os == 'Linux'
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})
        set(ninja_version $ENV{NINJA_VERSION})

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "windows-x86_64.zip")
          set(cmake_dir "cmake-${cmake_version}-windows-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-linux-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ninja_suffix "mac.zip")
          set(cmake_suffix "macos-universal.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
        endif()

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

        # Add to PATH environment variable
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")

        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()
    
    - name: Install Other 3rd Party Dependencies - Linux
      id: external_libraries_linux
      if: runner.os == 'Linux'
      run: |
        chmod 700 scripts/install_dependencies.sh
        scripts/install_dependencies.sh
      shell: bash

    - name: Configure and Build Application for Windows
      id: build_uengine4_windows
      if: runner.os == 'Windows'
      run: |
        echo %CD%
        echo %CD%\..\..\sdl3-install
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -DCMAKE_PREFIX_PATH=%CD%\..\..\sdl3-install
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -DCMAKE_PREFIX_PATH=%CD%\..\..\sdl3-install\cmake
        cd build_ninja
        ninja
        cd ..
      shell: cmd 

    - name: Configure Application for Linux
      if: runner.os == 'Linux'
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
      shell: bash      
      
    - name: Build Linux Application
      if: runner.os == 'Linux'
      run: cmake --build build
      shell: bash      
    
    - name: Execute Unit Tests
      if: runner.os == 'Linux'
      run: |
        cd build/test
        ctest --output-on-failure --output-junit test-results.xml
        cd ../..
      shell: bash   
    
    # Bu adim ile Artifacts altinda test sonuçları gorunecek
    - name: Upload test results
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
          name: ctest-results
          path: build/test/test-results.xml   

    # ------------------------
    # gcovr (HTML+XML)
    # ------------------------
    - name: Generate coverage report (gcovr)
      if: runner.os == 'Linux'
      run: |
        mkdir gcovr_report
        gcovr --root . --exclude GoogleTest/ --xml-pretty --output gcovr_report/coverage.xml
        gcovr --root . --exclude GoogleTest/ --html --html-details -o gcovr_report/coverage.html
      shell: bash

    - name: Upload gcovr report
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: gcovr-report
        path: |
          gcovr_report/coverage.xml
          gcovr_report/coverage.html
    
    # Bu adim ile uygulama çalıştırılabilir dosyalar Artifacts altinda gorunecek
    - name: Upload built application files
      uses: actions/upload-artifact@v4
      with:
          name: application-linux-x64
          path: build/app/sdl3-example-app   
  